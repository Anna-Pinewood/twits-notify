version: "3.8"

services:
  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d
      - db_data:/var/lib/postgresql/data

  consumer:
    build: 
      context: ./backend/consumer
      dockerfile: Dockerfile
    container_name: consumer
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432  # Use internal port
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      RABBIT_HOST: rabbit
      RABBIT_PORT: 5672
      RABBIT_USER: ${RABBIT_USER}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      RABBIT_QUEUE: ${RABBIT_QUEUE}
      LLM_MODEL_NAME: ${LLM_MODEL_NAME}
      LLM_API_KEY: ${LLM_API_KEY}
      LLM_BASE_URL: ${LLM_BASE_URL}
      PYTHONUNBUFFERED: 1  # Add this to ensure logs are output immediately
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      rabbit:
        condition: service_healthy

  rabbit:
    image: rabbitmq:3.11-management
    container_name: rabbit
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    ports:
      - "${RABBIT_PORT}:5672"
      - "${RABBIT_UI_PORT}:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: 
      context: ./backend/api
      dockerfile: Dockerfile
    container_name: api
    environment:
      POSTGRES_HOST: db         # Use service name as hostname
      POSTGRES_PORT: 5432       # Internal port inside Docker network
      # POSTGRES_PORT: ${POSTGRES_PORT}  
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      RABBIT_HOST: rabbit
      RABBIT_PORT: 5672
      RABBIT_USER: ${RABBIT_USER}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      RABBIT_QUEUE: ${RABBIT_QUEUE}
      API_PORT: ${API_PORT}
      REDDIT_SECRET: ${REDDIT_SECRET}
      REDDIT_CLIENT_ID: ${REDDIT_CLIENT_ID}
      REDDIT_APP_NAME: ${REDDIT_APP_NAME}
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      rabbit:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port ${API_PORT} --reload


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT}:9090"
    depends_on:
      - api
    networks:
      - monitoring

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring

volumes:
  db_data:
  prometheus_data: {}
  grafana_data: {}

networks:
  monitoring:
    driver: bridge